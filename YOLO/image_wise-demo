model = YOLO('yolov8n.pt')  # Use the YOLOv8 nano model; change to yolov8s.pt or yolov8m.pt for larger models

TARGET_CLASSES = ['bus', 'car', 'person', 'traffic sign']


def filter_detections(results):
    detections = []
    for result in results:  # Iterate over each result
        boxes = result.boxes.xyxy.cpu().numpy()  # Bounding box coordinates
        confs = result.boxes.conf.cpu().numpy()  # Confidence scores
        classes = result.boxes.cls.cpu().numpy()  # Class indices
        names = [result.names[int(cls)] for cls in classes]  # Class names
        for box, conf, cls_name in zip(boxes, confs, names):
            if cls_name in TARGET_CLASSES:
                detections.append({
                    'xmin': box[0], 'ymin': box[1], 'xmax': box[2], 'ymax': box[3],
                    'confidence': conf, 'name': cls_name
                })
    return pd.DataFrame(detections)

def plot_results(image_path, detections):
    img = Image.open(image_path).convert('RGB')
    plt.figure(figsize=(12, 8))
    plt.imshow(img)

    for _, row in detections.iterrows():
        x1, y1, x2, y2, conf, cls_name = (
            row['xmin'], row['ymin'], row['xmax'], row['ymax'], row['confidence'], row['name']
        )
        plt.gca().add_patch(
            plt.Rectangle((x1, y1), x2 - x1, y2 - y1, edgecolor='red', fill=False, linewidth=2)
        )
        plt.text(
            x1, y1 - 5, f"{cls_name} {conf:.2f}",
            color='red', fontsize=10, backgroundcolor='white'
        )

    plt.axis('off')
    plt.show()


image_path = '/content/6cf7a093-0f0b61f6.jpg'


results = model.predict(image_path, save=False)

detections = filter_detections(results)


print(detections)


plot_results(image_path, detections)


def evaluate_model(predictions, ground_truth):
    pass
